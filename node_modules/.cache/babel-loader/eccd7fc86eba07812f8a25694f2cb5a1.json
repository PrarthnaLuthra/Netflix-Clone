{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n}; // src/YouTube.tsx\n\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport isEqual from \"fast-deep-equal\";\nimport youTubePlayer from \"youtube-player\";\n\nfunction shouldUpdateVideo(prevProps, props) {\n  var _a, _b;\n\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n\n  const prevVars = ((_a = prevProps.opts) == null ? void 0 : _a.playerVars) || {};\n  const vars = ((_b = props.opts) == null ? void 0 : _b.playerVars) || {};\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n\nfunction filterResetOptions() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return __spreadProps(__spreadValues({}, opts), {\n    height: 0,\n    width: 0,\n    playerVars: __spreadProps(__spreadValues({}, opts.playerVars), {\n      autoplay: 0,\n      start: 0,\n      end: 0\n    })\n  });\n}\n\nfunction shouldResetPlayer(prevProps, props) {\n  return prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts));\n}\n\nfunction shouldUpdatePlayer(prevProps, props) {\n  var _a, _b, _c, _d;\n\n  return prevProps.id !== props.id || prevProps.className !== props.className || ((_a = prevProps.opts) == null ? void 0 : _a.width) !== ((_b = props.opts) == null ? void 0 : _b.width) || ((_c = prevProps.opts) == null ? void 0 : _c.height) !== ((_d = props.opts) == null ? void 0 : _d.height) || prevProps.iframeClassName !== props.iframeClassName || prevProps.title !== props.title;\n}\n\nvar defaultProps = {\n  videoId: \"\",\n  id: \"\",\n  className: \"\",\n  iframeClassName: \"\",\n  style: {},\n  title: \"\",\n  loading: void 0,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {}\n};\nvar propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf([\"lazy\", \"eager\"]),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func\n};\n\nvar _YouTube = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.destroyPlayerPromise = void 0;\n\n    this.onPlayerReady = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onReady) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.onPlayerError = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onError) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.onPlayerStateChange = event => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n\n      (_b = (_a = this.props).onStateChange) == null ? void 0 : _b.call(_a, event);\n\n      switch (event.data) {\n        case _YouTube.PlayerState.ENDED:\n          (_d = (_c = this.props).onEnd) == null ? void 0 : _d.call(_c, event);\n          break;\n\n        case _YouTube.PlayerState.PLAYING:\n          (_f = (_e = this.props).onPlay) == null ? void 0 : _f.call(_e, event);\n          break;\n\n        case _YouTube.PlayerState.PAUSED:\n          (_h = (_g = this.props).onPause) == null ? void 0 : _h.call(_g, event);\n          break;\n\n        default:\n      }\n    };\n\n    this.onPlayerPlaybackRateChange = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onPlaybackRateChange) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.onPlayerPlaybackQualityChange = event => {\n      var _a, _b;\n\n      return (_b = (_a = this.props).onPlaybackQualityChange) == null ? void 0 : _b.call(_a, event);\n    };\n\n    this.destroyPlayer = () => {\n      if (this.internalPlayer) {\n        this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => this.destroyPlayerPromise = void 0);\n        return this.destroyPlayerPromise;\n      }\n\n      return Promise.resolve();\n    };\n\n    this.createPlayer = () => {\n      if (typeof document === \"undefined\") return;\n\n      if (this.destroyPlayerPromise) {\n        this.destroyPlayerPromise.then(this.createPlayer);\n        return;\n      }\n\n      const playerOpts = __spreadProps(__spreadValues({}, this.props.opts), {\n        videoId: this.props.videoId\n      });\n\n      this.internalPlayer = youTubePlayer(this.container, playerOpts);\n      this.internalPlayer.on(\"ready\", this.onPlayerReady);\n      this.internalPlayer.on(\"error\", this.onPlayerError);\n      this.internalPlayer.on(\"stateChange\", this.onPlayerStateChange);\n      this.internalPlayer.on(\"playbackRateChange\", this.onPlayerPlaybackRateChange);\n      this.internalPlayer.on(\"playbackQualityChange\", this.onPlayerPlaybackQualityChange);\n\n      if (this.props.title || this.props.loading) {\n        this.internalPlayer.getIframe().then(iframe => {\n          if (this.props.title) iframe.setAttribute(\"title\", this.props.title);\n          if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);\n        });\n      }\n    };\n\n    this.resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n\n    this.updatePlayer = () => {\n      var _a;\n\n      (_a = this.internalPlayer) == null ? void 0 : _a.getIframe().then(iframe => {\n        if (this.props.id) iframe.setAttribute(\"id\", this.props.id);else iframe.removeAttribute(\"id\");\n        if (this.props.iframeClassName) iframe.setAttribute(\"class\", this.props.iframeClassName);else iframe.removeAttribute(\"class\");\n        if (this.props.opts && this.props.opts.width) iframe.setAttribute(\"width\", this.props.opts.width.toString());else iframe.removeAttribute(\"width\");\n        if (this.props.opts && this.props.opts.height) iframe.setAttribute(\"height\", this.props.opts.height.toString());else iframe.removeAttribute(\"height\");\n        if (this.props.title) iframe.setAttribute(\"title\", this.props.title);else iframe.setAttribute(\"title\", \"YouTube video player\");\n        if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);else iframe.removeAttribute(\"loading\");\n      });\n    };\n\n    this.getInternalPlayer = () => {\n      return this.internalPlayer;\n    };\n\n    this.updateVideo = () => {\n      var _a, _b, _c, _d;\n\n      if (typeof this.props.videoId === \"undefined\" || this.props.videoId === null) {\n        (_a = this.internalPlayer) == null ? void 0 : _a.stopVideo();\n        return;\n      }\n\n      let autoplay = false;\n      const opts = {\n        videoId: this.props.videoId\n      };\n\n      if ((_b = this.props.opts) == null ? void 0 : _b.playerVars) {\n        autoplay = this.props.opts.playerVars.autoplay === 1;\n\n        if (\"start\" in this.props.opts.playerVars) {\n          opts.startSeconds = this.props.opts.playerVars.start;\n        }\n\n        if (\"end\" in this.props.opts.playerVars) {\n          opts.endSeconds = this.props.opts.playerVars.end;\n        }\n      }\n\n      if (autoplay) {\n        (_c = this.internalPlayer) == null ? void 0 : _c.loadVideoById(opts);\n        return;\n      }\n\n      (_d = this.internalPlayer) == null ? void 0 : _d.cueVideoById(opts);\n    };\n\n    this.refContainer = container => {\n      this.container = container;\n    };\n\n    this.container = null;\n    this.internalPlayer = null;\n  }\n\n  componentDidMount() {\n    this.createPlayer();\n  }\n\n  componentDidUpdate(prevProps) {\n    return __async(this, null, function* () {\n      if (shouldUpdatePlayer(prevProps, this.props)) {\n        this.updatePlayer();\n      }\n\n      if (shouldResetPlayer(prevProps, this.props)) {\n        yield this.resetPlayer();\n      }\n\n      if (shouldUpdateVideo(prevProps, this.props)) {\n        this.updateVideo();\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n\n  render() {\n    return /* @__PURE__ */React.createElement(\"div\", {\n      className: this.props.className,\n      style: this.props.style\n    }, /* @__PURE__ */React.createElement(\"div\", {\n      id: this.props.id,\n      className: this.props.iframeClassName,\n      ref: this.refContainer\n    }));\n  }\n\n};\n\nvar YouTube = _YouTube;\nYouTube.propTypes = propTypes;\nYouTube.defaultProps = defaultProps;\nYouTube.PlayerState = {\n  UNSTARTED: -1,\n  ENDED: 0,\n  PLAYING: 1,\n  PAUSED: 2,\n  BUFFERING: 3,\n  CUED: 5\n};\nvar YouTube_default = YouTube;\nexport { YouTube_default as default };","map":{"version":3,"mappings":"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","names":["PropTypes","React","isEqual","youTubePlayer","shouldUpdateVideo","prevProps","props","videoId","prevVars","_a","opts","playerVars","vars","_b","start","end","filterResetOptions","__spreadProps","height","width","autoplay","shouldResetPlayer","shouldUpdatePlayer","id","className","_c","_d","iframeClassName","title","defaultProps","style","loading","onReady","onError","onPlay","onPause","onEnd","onStateChange","onPlaybackRateChange","onPlaybackQualityChange","propTypes","string","object","oneOf","objectOf","any","func","_YouTube","Component","constructor","event","data","PlayerState","ENDED","PLAYING","PAUSED","internalPlayer","destroyPlayerPromise","destroy","then","Promise","resolve","document","createPlayer","playerOpts","container","on","onPlayerReady","onPlayerError","onPlayerStateChange","onPlayerPlaybackRateChange","onPlayerPlaybackQualityChange","getIframe","iframe","setAttribute","destroyPlayer","removeAttribute","toString","stopVideo","startSeconds","endSeconds","loadVideoById","cueVideoById","componentDidMount","componentDidUpdate","updatePlayer","resetPlayer","updateVideo","componentWillUnmount","render","ref","refContainer","YouTube","UNSTARTED","BUFFERING","CUED","YouTube_default"],"sources":["/Users/prarthnaluthra/Desktop/netflix/node_modules/react-youtube/src/YouTube.tsx"],"sourcesContent":["/** @jsxRuntime classic */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isEqual from 'fast-deep-equal';\nimport youTubePlayer from 'youtube-player';\nimport type { YouTubePlayer, Options } from 'youtube-player/dist/types';\n\n/**\n * Check whether a `props` change should result in the video being updated.\n */\nfunction shouldUpdateVideo(prevProps: YouTubeProps, props: YouTubeProps) {\n  // A changing video should always trigger an update\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n\n  // Otherwise, a change in the start/end time playerVars also requires a player\n  // update.\n  const prevVars = prevProps.opts?.playerVars || {};\n  const vars = props.opts?.playerVars || {};\n\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n\n/**\n * Neutralize API options that only require a video update, leaving only options\n * that require a player reset. The results can then be compared to see if a\n * player reset is necessary.\n */\nfunction filterResetOptions(opts: Options = {}) {\n  return {\n    ...opts,\n    height: 0,\n    width: 0,\n    playerVars: {\n      ...opts.playerVars,\n      autoplay: 0,\n      start: 0,\n      end: 0,\n    },\n  };\n}\n\n/**\n * Check whether a `props` change should result in the player being reset.\n * The player is reset when the `props.opts` change, except if the only change\n * is in the `start` and `end` playerVars, because a video update can deal with\n * those.\n */\nfunction shouldResetPlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts))\n  );\n}\n\n/**\n * Check whether a props change should result in an update of player.\n */\nfunction shouldUpdatePlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.id !== props.id ||\n    prevProps.className !== props.className ||\n    prevProps.opts?.width !== props.opts?.width ||\n    prevProps.opts?.height !== props.opts?.height ||\n    prevProps.iframeClassName !== props.iframeClassName ||\n    prevProps.title !== props.title\n  );\n}\n\ntype YoutubePlayerCueVideoOptions = {\n  videoId: string;\n  startSeconds?: number;\n  endSeconds?: number;\n  suggestedQuality?: string;\n};\n\nexport { YouTubePlayer };\n\nexport type YouTubeEvent<T = any> = {\n  data: T;\n  target: YouTubePlayer;\n};\n\nexport type YouTubeProps = {\n  /**\n   * The YouTube video ID.\n   *\n   * Examples\n   * - https://www.youtube.com/watch?v=XxVg_s8xAms (`XxVg_s8xAms` is the ID)\n   * - https://www.youtube.com/embed/-DX3vJiqxm4 (`-DX3vJiqxm4` is the ID)\n   */\n  videoId?: string;\n  /**\n   * Custom ID for the player element\n   */\n  id?: string;\n  /**\n   * Custom class name for the player element\n   */\n  className?: string;\n  /**\n   * Custom class name for the iframe element\n   */\n  iframeClassName?: string;\n  /**\n   * Custom style for the player container element\n   */\n  style?: React.CSSProperties;\n  /**\n   * Title of the video for the iframe's title tag.\n   */\n  title?: React.IframeHTMLAttributes<HTMLIFrameElement>['title'];\n  /**\n   * Indicates how the browser should load the iframe\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-loading}\n   */\n  loading?: React.IframeHTMLAttributes<HTMLIFrameElement>['loading'];\n  /**\n   * An object that specifies player options\n   * {@link https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player}\n   */\n  opts?: Options;\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onReady}\n   */\n  onReady?: (event: YouTubeEvent) => void;\n  /**\n   * This event fires if an error occurs in the player.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onError}\n   */\n  onError?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PLAYING.\n   */\n  onPlay?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PAUSED.\n   */\n  onPause?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.ENDED.\n   */\n  onEnd?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the player's state changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onStateChange}\n   */\n  onStateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback quality changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange}\n   */\n  onPlaybackRateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback rate changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange}\n   */\n  onPlaybackQualityChange?: (event: YouTubeEvent<string>) => void;\n};\n\nconst defaultProps: YouTubeProps = {\n  videoId: '',\n  id: '',\n  className: '',\n  iframeClassName: '',\n  style: {},\n  title: '',\n  loading: undefined,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {},\n};\n\nconst propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf(['lazy', 'eager']),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func,\n};\n\nclass YouTube extends React.Component<YouTubeProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  /**\n   * Expose PlayerState constants for convenience. These constants can also be\n   * accessed through the global YT object after the YouTube IFrame API is instantiated.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  static PlayerState = {\n    UNSTARTED: -1,\n    ENDED: 0,\n    PLAYING: 1,\n    PAUSED: 2,\n    BUFFERING: 3,\n    CUED: 5,\n  };\n\n  container: HTMLDivElement | null;\n  internalPlayer: YouTubePlayer | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.container = null;\n    this.internalPlayer = null;\n  }\n\n  /**\n   * Note: The `youtube-player` package that is used promisifies all YouTube\n   * Player API calls, which introduces a delay of a tick before it actually\n   * gets destroyed.\n   *\n   * The promise to destroy the player is stored here so we can make sure to\n   * only re-create the Player after it's been destroyed.\n   *\n   * See: https://github.com/tjallingt/react-youtube/issues/355\n   */\n  destroyPlayerPromise: Promise<void> | undefined = undefined;\n\n  componentDidMount() {\n    this.createPlayer();\n  }\n\n  async componentDidUpdate(prevProps: YouTubeProps) {\n    if (shouldUpdatePlayer(prevProps, this.props)) {\n      this.updatePlayer();\n    }\n\n    if (shouldResetPlayer(prevProps, this.props)) {\n      await this.resetPlayer();\n    }\n\n    if (shouldUpdateVideo(prevProps, this.props)) {\n      this.updateVideo();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * https://developers.google.com/youtube/iframe_api_reference#onReady\n   */\n  onPlayerReady = (event: YouTubeEvent) => this.props.onReady?.(event);\n\n  /**\n   * This event fires if an error occurs in the player.\n   * https://developers.google.com/youtube/iframe_api_reference#onError\n   */\n  onPlayerError = (event: YouTubeEvent<number>) => this.props.onError?.(event);\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  onPlayerStateChange = (event: YouTubeEvent<number>) => {\n    this.props.onStateChange?.(event);\n    // @ts-ignore\n    switch (event.data) {\n      case YouTube.PlayerState.ENDED:\n        this.props.onEnd?.(event);\n        break;\n\n      case YouTube.PlayerState.PLAYING:\n        this.props.onPlay?.(event);\n        break;\n\n      case YouTube.PlayerState.PAUSED:\n        this.props.onPause?.(event);\n        break;\n\n      default:\n    }\n  };\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange\n   */\n  onPlayerPlaybackRateChange = (event: YouTubeEvent<number>) => this.props.onPlaybackRateChange?.(event);\n\n  /**\n   * This event fires whenever the video playback rate changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange\n   */\n  onPlayerPlaybackQualityChange = (event: YouTubeEvent<string>) => this.props.onPlaybackQualityChange?.(event);\n\n  /**\n   * Destroy the YouTube Player using its async API and store the promise so we\n   * can await before re-creating it.\n   */\n  destroyPlayer = () => {\n    if (this.internalPlayer) {\n      this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => (this.destroyPlayerPromise = undefined));\n      return this.destroyPlayerPromise;\n    }\n    return Promise.resolve();\n  };\n\n  /**\n   * Initialize the YouTube Player API on the container and attach event handlers\n   */\n  createPlayer = () => {\n    // do not attempt to create a player server-side, it won't work\n    if (typeof document === 'undefined') return;\n    if (this.destroyPlayerPromise) {\n      // We need to first await the existing player to be destroyed before\n      // we can re-create it.\n      this.destroyPlayerPromise.then(this.createPlayer);\n      return;\n    }\n    // create player\n    const playerOpts: Options = {\n      ...this.props.opts,\n      // preload the `videoId` video if one is already given\n      videoId: this.props.videoId,\n    };\n    this.internalPlayer = youTubePlayer(this.container!, playerOpts);\n    // attach event handlers\n    this.internalPlayer.on('ready', this.onPlayerReady as any);\n    this.internalPlayer.on('error', this.onPlayerError as any);\n    this.internalPlayer.on('stateChange', this.onPlayerStateChange as any);\n    this.internalPlayer.on('playbackRateChange', this.onPlayerPlaybackRateChange as any);\n    this.internalPlayer.on('playbackQualityChange', this.onPlayerPlaybackQualityChange as any);\n    if (this.props.title || this.props.loading) {\n      this.internalPlayer.getIframe().then((iframe) => {\n        if (this.props.title) iframe.setAttribute('title', this.props.title);\n        if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      });\n    }\n  };\n\n  /**\n   * Shorthand for destroying and then re-creating the YouTube Player\n   */\n  resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n\n  /**\n   * Method to update the id and class of the YouTube Player iframe.\n   * React should update this automatically but since the YouTube Player API\n   * replaced the DIV that is mounted by React we need to do this manually.\n   */\n  updatePlayer = () => {\n    this.internalPlayer?.getIframe().then((iframe) => {\n      if (this.props.id) iframe.setAttribute('id', this.props.id);\n      else iframe.removeAttribute('id');\n      if (this.props.iframeClassName) iframe.setAttribute('class', this.props.iframeClassName);\n      else iframe.removeAttribute('class');\n      if (this.props.opts && this.props.opts.width) iframe.setAttribute('width', this.props.opts.width.toString());\n      else iframe.removeAttribute('width');\n      if (this.props.opts && this.props.opts.height) iframe.setAttribute('height', this.props.opts.height.toString());\n      else iframe.removeAttribute('height');\n      if (this.props.title) iframe.setAttribute('title', this.props.title);\n      else iframe.setAttribute('title', 'YouTube video player');\n      if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      else iframe.removeAttribute('loading');\n    });\n  };\n\n  /**\n   *  Method to return the internalPlayer object.\n   */\n  getInternalPlayer = () => {\n    return this.internalPlayer;\n  };\n\n  /**\n   * Call YouTube Player API methods to update the currently playing video.\n   * Depending on the `opts.playerVars.autoplay` this function uses one of two\n   * YouTube Player API methods to update the video.\n   */\n  updateVideo = () => {\n    if (typeof this.props.videoId === 'undefined' || this.props.videoId === null) {\n      this.internalPlayer?.stopVideo();\n      return;\n    }\n\n    // set queueing options\n    let autoplay = false;\n    const opts: YoutubePlayerCueVideoOptions = {\n      videoId: this.props.videoId,\n    };\n\n    if (this.props.opts?.playerVars) {\n      autoplay = this.props.opts.playerVars.autoplay === 1;\n      if ('start' in this.props.opts.playerVars) {\n        opts.startSeconds = this.props.opts.playerVars.start;\n      }\n      if ('end' in this.props.opts.playerVars) {\n        opts.endSeconds = this.props.opts.playerVars.end;\n      }\n    }\n\n    // if autoplay is enabled loadVideoById\n    if (autoplay) {\n      this.internalPlayer?.loadVideoById(opts);\n      return;\n    }\n    // default behaviour just cues the video\n    this.internalPlayer?.cueVideoById(opts);\n  };\n\n  refContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  render() {\n    return (\n      <div className={this.props.className} style={this.props.style}>\n        <div id={this.props.id} className={this.props.iframeClassName} ref={this.refContainer} />\n      </div>\n    );\n  }\n}\n\nexport default YouTube;\n"]},"metadata":{},"sourceType":"module"}