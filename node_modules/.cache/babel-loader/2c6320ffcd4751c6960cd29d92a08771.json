{"ast":null,"code":"import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\n\nconst composeSignals = (signals, timeout) => {\n  const {\n    length\n  } = signals = signals ? signals.filter(Boolean) : [];\n\n  if (timeout || length) {\n    let controller = new AbortController();\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    };\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));\n    }, timeout);\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    };\n\n    signals.forEach(signal => signal.addEventListener('abort', onabort));\n    const {\n      signal\n    } = controller;\n\n    signal.unsubscribe = () => utils.asap(unsubscribe);\n\n    return signal;\n  }\n};\n\nexport default composeSignals;","map":{"version":3,"sources":["/Users/prarthnaluthra/Desktop/netflix/node_modules/axios/lib/helpers/composeSignals.js"],"names":["CanceledError","AxiosError","utils","composeSignals","signals","timeout","length","filter","Boolean","controller","AbortController","aborted","onabort","reason","unsubscribe","err","Error","abort","message","timer","setTimeout","ETIMEDOUT","clearTimeout","forEach","signal","removeEventListener","addEventListener","asap"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,4BAA1B;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,cAAc,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC3C,QAAM;AAACC,IAAAA;AAAD,MAAYF,OAAO,GAAGA,OAAO,GAAGA,OAAO,CAACG,MAAR,CAAeC,OAAf,CAAH,GAA6B,EAAhE;;AAEA,MAAIH,OAAO,IAAIC,MAAf,EAAuB;AACrB,QAAIG,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AAEA,QAAIC,OAAJ;;AAEA,UAAMC,OAAO,GAAG,UAAUC,MAAV,EAAkB;AAChC,UAAI,CAACF,OAAL,EAAc;AACZA,QAAAA,OAAO,GAAG,IAAV;AACAG,QAAAA,WAAW;AACX,cAAMC,GAAG,GAAGF,MAAM,YAAYG,KAAlB,GAA0BH,MAA1B,GAAmC,KAAKA,MAApD;AACAJ,QAAAA,UAAU,CAACQ,KAAX,CAAiBF,GAAG,YAAYd,UAAf,GAA4Bc,GAA5B,GAAkC,IAAIf,aAAJ,CAAkBe,GAAG,YAAYC,KAAf,GAAuBD,GAAG,CAACG,OAA3B,GAAqCH,GAAvD,CAAnD;AACD;AACF,KAPD;;AASA,QAAII,KAAK,GAAGd,OAAO,IAAIe,UAAU,CAAC,MAAM;AACtCD,MAAAA,KAAK,GAAG,IAAR;AACAP,MAAAA,OAAO,CAAC,IAAIX,UAAJ,CAAgB,WAAUI,OAAQ,iBAAlC,EAAoDJ,UAAU,CAACoB,SAA/D,CAAD,CAAP;AACD,KAHgC,EAG9BhB,OAH8B,CAAjC;;AAKA,UAAMS,WAAW,GAAG,MAAM;AACxB,UAAIV,OAAJ,EAAa;AACXe,QAAAA,KAAK,IAAIG,YAAY,CAACH,KAAD,CAArB;AACAA,QAAAA,KAAK,GAAG,IAAR;AACAf,QAAAA,OAAO,CAACmB,OAAR,CAAgBC,MAAM,IAAI;AACxBA,UAAAA,MAAM,CAACV,WAAP,GAAqBU,MAAM,CAACV,WAAP,CAAmBF,OAAnB,CAArB,GAAmDY,MAAM,CAACC,mBAAP,CAA2B,OAA3B,EAAoCb,OAApC,CAAnD;AACD,SAFD;AAGAR,QAAAA,OAAO,GAAG,IAAV;AACD;AACF,KATD;;AAWAA,IAAAA,OAAO,CAACmB,OAAR,CAAiBC,MAAD,IAAYA,MAAM,CAACE,gBAAP,CAAwB,OAAxB,EAAiCd,OAAjC,CAA5B;AAEA,UAAM;AAACY,MAAAA;AAAD,QAAWf,UAAjB;;AAEAe,IAAAA,MAAM,CAACV,WAAP,GAAqB,MAAMZ,KAAK,CAACyB,IAAN,CAAWb,WAAX,CAA3B;;AAEA,WAAOU,MAAP;AACD;AACF,CAzCD;;AA2CA,eAAerB,cAAf","sourcesContent":["import CanceledError from \"../cancel/CanceledError.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport utils from '../utils.js';\n\nconst composeSignals = (signals, timeout) => {\n  const {length} = (signals = signals ? signals.filter(Boolean) : []);\n\n  if (timeout || length) {\n    let controller = new AbortController();\n\n    let aborted;\n\n    const onabort = function (reason) {\n      if (!aborted) {\n        aborted = true;\n        unsubscribe();\n        const err = reason instanceof Error ? reason : this.reason;\n        controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));\n      }\n    }\n\n    let timer = timeout && setTimeout(() => {\n      timer = null;\n      onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT))\n    }, timeout)\n\n    const unsubscribe = () => {\n      if (signals) {\n        timer && clearTimeout(timer);\n        timer = null;\n        signals.forEach(signal => {\n          signal.unsubscribe ? signal.unsubscribe(onabort) : signal.removeEventListener('abort', onabort);\n        });\n        signals = null;\n      }\n    }\n\n    signals.forEach((signal) => signal.addEventListener('abort', onabort));\n\n    const {signal} = controller;\n\n    signal.unsubscribe = () => utils.asap(unsubscribe);\n\n    return signal;\n  }\n}\n\nexport default composeSignals;\n"]},"metadata":{},"sourceType":"module"}