{"ast":null,"code":"import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport { progressEventReducer } from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {\n      responseType,\n      onUploadProgress,\n      onDownloadProgress\n    } = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n    request.open(_config.method.toUpperCase(), _config.url, true); // Set the request timeout in MS\n\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      } // Prepare the response\n\n\n      const responseHeaders = AxiosHeaders.from('getAllResponseHeaders' in request && request.getAllResponseHeaders());\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response); // Clean up request\n\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        } // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n\n\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        } // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n\n\n        setTimeout(onloadend);\n      };\n    } // Handle browser request cancellation (as opposed to a manual cancellation)\n\n\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request)); // Clean up request\n\n      request = null;\n    }; // Handle low level network errors\n\n\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request)); // Clean up request\n\n      request = null;\n    }; // Handle timeout\n\n\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n\n      reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config, request)); // Clean up request\n\n      request = null;\n    }; // Remove Content-Type if data is undefined\n\n\n    requestData === undefined && requestHeaders.setContentType(null); // Add headers to the request\n\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    } // Add withCredentials to request if needed\n\n\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    } // Add responseType to request if needed\n\n\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    } // Handle progress if needed\n\n\n    if (onDownloadProgress) {\n      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);\n      request.addEventListener('progress', downloadThrottled);\n    } // Not all browsers support upload events\n\n\n    if (onUploadProgress && request.upload) {\n      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);\n      request.upload.addEventListener('progress', uploadThrottled);\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    } // Send the request\n\n\n    request.send(requestData || null);\n  });\n};","map":{"version":3,"sources":["/Users/prarthnaluthra/Desktop/netflix/node_modules/axios/lib/adapters/xhr.js"],"names":["utils","settle","transitionalDefaults","AxiosError","CanceledError","parseProtocol","platform","AxiosHeaders","progressEventReducer","resolveConfig","isXHRAdapterSupported","XMLHttpRequest","config","Promise","dispatchXhrRequest","resolve","reject","_config","requestData","data","requestHeaders","from","headers","normalize","responseType","onUploadProgress","onDownloadProgress","onCanceled","uploadThrottled","downloadThrottled","flushUpload","flushDownload","done","cancelToken","unsubscribe","signal","removeEventListener","request","open","method","toUpperCase","url","timeout","onloadend","responseHeaders","getAllResponseHeaders","responseData","responseText","response","status","statusText","_resolve","value","_reject","err","onreadystatechange","handleLoad","readyState","responseURL","indexOf","setTimeout","onabort","handleAbort","ECONNABORTED","onerror","handleError","ERR_NETWORK","ontimeout","handleTimeout","timeoutErrorMessage","transitional","clarifyTimeoutError","ETIMEDOUT","undefined","setContentType","forEach","toJSON","setRequestHeader","val","key","isUndefined","withCredentials","addEventListener","upload","cancel","type","abort","subscribe","aborted","protocol","protocols","ERR_BAD_REQUEST","send"],"mappings":"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","sourcesContent":["import utils from './../utils.js';\nimport settle from './../core/settle.js';\nimport transitionalDefaults from '../defaults/transitional.js';\nimport AxiosError from '../core/AxiosError.js';\nimport CanceledError from '../cancel/CanceledError.js';\nimport parseProtocol from '../helpers/parseProtocol.js';\nimport platform from '../platform/index.js';\nimport AxiosHeaders from '../core/AxiosHeaders.js';\nimport {progressEventReducer} from '../helpers/progressEventReducer.js';\nimport resolveConfig from \"../helpers/resolveConfig.js\";\n\nconst isXHRAdapterSupported = typeof XMLHttpRequest !== 'undefined';\n\nexport default isXHRAdapterSupported && function (config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    const _config = resolveConfig(config);\n    let requestData = _config.data;\n    const requestHeaders = AxiosHeaders.from(_config.headers).normalize();\n    let {responseType, onUploadProgress, onDownloadProgress} = _config;\n    let onCanceled;\n    let uploadThrottled, downloadThrottled;\n    let flushUpload, flushDownload;\n\n    function done() {\n      flushUpload && flushUpload(); // flush events\n      flushDownload && flushDownload(); // flush events\n\n      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);\n\n      _config.signal && _config.signal.removeEventListener('abort', onCanceled);\n    }\n\n    let request = new XMLHttpRequest();\n\n    request.open(_config.method.toUpperCase(), _config.url, true);\n\n    // Set the request timeout in MS\n    request.timeout = _config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      const responseHeaders = AxiosHeaders.from(\n        'getAllResponseHeaders' in request && request.getAllResponseHeaders()\n      );\n      const responseData = !responseType || responseType === 'text' || responseType === 'json' ?\n        request.responseText : request.response;\n      const response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config,\n        request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(new AxiosError('Request aborted', AxiosError.ECONNABORTED, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      let timeoutErrorMessage = _config.timeout ? 'timeout of ' + _config.timeout + 'ms exceeded' : 'timeout exceeded';\n      const transitional = _config.transitional || transitionalDefaults;\n      if (_config.timeoutErrorMessage) {\n        timeoutErrorMessage = _config.timeoutErrorMessage;\n      }\n      reject(new AxiosError(\n        timeoutErrorMessage,\n        transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,\n        config,\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Remove Content-Type if data is undefined\n    requestData === undefined && requestHeaders.setContentType(null);\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {\n        request.setRequestHeader(key, val);\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(_config.withCredentials)) {\n      request.withCredentials = !!_config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = _config.responseType;\n    }\n\n    // Handle progress if needed\n    if (onDownloadProgress) {\n      ([downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true));\n      request.addEventListener('progress', downloadThrottled);\n    }\n\n    // Not all browsers support upload events\n    if (onUploadProgress && request.upload) {\n      ([uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress));\n\n      request.upload.addEventListener('progress', uploadThrottled);\n\n      request.upload.addEventListener('loadend', flushUpload);\n    }\n\n    if (_config.cancelToken || _config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = cancel => {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);\n        request.abort();\n        request = null;\n      };\n\n      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);\n      if (_config.signal) {\n        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    const protocol = parseProtocol(_config.url);\n\n    if (protocol && platform.protocols.indexOf(protocol) === -1) {\n      reject(new AxiosError('Unsupported protocol ' + protocol + ':', AxiosError.ERR_BAD_REQUEST, config));\n      return;\n    }\n\n\n    // Send the request\n    request.send(requestData || null);\n  });\n}\n"]},"metadata":{},"sourceType":"module"}