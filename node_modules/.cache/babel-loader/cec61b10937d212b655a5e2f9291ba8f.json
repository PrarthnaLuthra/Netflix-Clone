{"ast":null,"code":"export const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n};\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n};\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n\n  try {\n    for (;;) {\n      const {\n        done,\n        value\n      } = await reader.read();\n\n      if (done) {\n        break;\n      }\n\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n};\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n  let bytes = 0;\n  let done;\n\n  let _onFinish = e => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  };\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {\n          done,\n          value\n        } = await iterator.next();\n\n        if (done) {\n          _onFinish();\n\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n\n        throw err;\n      }\n    },\n\n    cancel(reason) {\n      _onFinish(reason);\n\n      return iterator.return();\n    }\n\n  }, {\n    highWaterMark: 2\n  });\n};","map":{"version":3,"sources":["/Users/prarthnaluthra/Desktop/netflix/node_modules/axios/lib/helpers/trackStream.js"],"names":["streamChunk","chunk","chunkSize","len","byteLength","pos","end","slice","readBytes","iterable","readStream","stream","Symbol","asyncIterator","reader","getReader","done","value","read","cancel","trackStream","onProgress","onFinish","iterator","bytes","_onFinish","e","ReadableStream","pull","controller","next","close","loadedBytes","enqueue","Uint8Array","err","reason","return","highWaterMark"],"mappings":"AACA,OAAO,MAAMA,WAAW,GAAG,WAAWC,KAAX,EAAkBC,SAAlB,EAA6B;AACtD,MAAIC,GAAG,GAAGF,KAAK,CAACG,UAAhB;;AAEA,MAAI,CAACF,SAAD,IAAcC,GAAG,GAAGD,SAAxB,EAAmC;AACjC,UAAMD,KAAN;AACA;AACD;;AAED,MAAII,GAAG,GAAG,CAAV;AACA,MAAIC,GAAJ;;AAEA,SAAOD,GAAG,GAAGF,GAAb,EAAkB;AAChBG,IAAAA,GAAG,GAAGD,GAAG,GAAGH,SAAZ;AACA,UAAMD,KAAK,CAACM,KAAN,CAAYF,GAAZ,EAAiBC,GAAjB,CAAN;AACAD,IAAAA,GAAG,GAAGC,GAAN;AACD;AACF,CAhBM;AAkBP,OAAO,MAAME,SAAS,GAAG,iBAAiBC,QAAjB,EAA2BP,SAA3B,EAAsC;AAC7D,aAAW,MAAMD,KAAjB,IAA0BS,UAAU,CAACD,QAAD,CAApC,EAAgD;AAC9C,WAAOT,WAAW,CAACC,KAAD,EAAQC,SAAR,CAAlB;AACD;AACF,CAJM;;AAMP,MAAMQ,UAAU,GAAG,iBAAiBC,MAAjB,EAAyB;AAC1C,MAAIA,MAAM,CAACC,MAAM,CAACC,aAAR,CAAV,EAAkC;AAChC,WAAOF,MAAP;AACA;AACD;;AAED,QAAMG,MAAM,GAAGH,MAAM,CAACI,SAAP,EAAf;;AACA,MAAI;AACF,aAAS;AACP,YAAM;AAACC,QAAAA,IAAD;AAAOC,QAAAA;AAAP,UAAgB,MAAMH,MAAM,CAACI,IAAP,EAA5B;;AACA,UAAIF,IAAJ,EAAU;AACR;AACD;;AACD,YAAMC,KAAN;AACD;AACF,GARD,SAQU;AACR,UAAMH,MAAM,CAACK,MAAP,EAAN;AACD;AACF,CAlBD;;AAoBA,OAAO,MAAMC,WAAW,GAAG,CAACT,MAAD,EAAST,SAAT,EAAoBmB,UAApB,EAAgCC,QAAhC,KAA6C;AACtE,QAAMC,QAAQ,GAAGf,SAAS,CAACG,MAAD,EAAST,SAAT,CAA1B;AAEA,MAAIsB,KAAK,GAAG,CAAZ;AACA,MAAIR,IAAJ;;AACA,MAAIS,SAAS,GAAIC,CAAD,IAAO;AACrB,QAAI,CAACV,IAAL,EAAW;AACTA,MAAAA,IAAI,GAAG,IAAP;AACAM,MAAAA,QAAQ,IAAIA,QAAQ,CAACI,CAAD,CAApB;AACD;AACF,GALD;;AAOA,SAAO,IAAIC,cAAJ,CAAmB;AACxB,UAAMC,IAAN,CAAWC,UAAX,EAAuB;AACrB,UAAI;AACF,cAAM;AAACb,UAAAA,IAAD;AAAOC,UAAAA;AAAP,YAAgB,MAAMM,QAAQ,CAACO,IAAT,EAA5B;;AAEA,YAAId,IAAJ,EAAU;AACTS,UAAAA,SAAS;;AACRI,UAAAA,UAAU,CAACE,KAAX;AACA;AACD;;AAED,YAAI5B,GAAG,GAAGc,KAAK,CAACb,UAAhB;;AACA,YAAIiB,UAAJ,EAAgB;AACd,cAAIW,WAAW,GAAGR,KAAK,IAAIrB,GAA3B;AACAkB,UAAAA,UAAU,CAACW,WAAD,CAAV;AACD;;AACDH,QAAAA,UAAU,CAACI,OAAX,CAAmB,IAAIC,UAAJ,CAAejB,KAAf,CAAnB;AACD,OAfD,CAeE,OAAOkB,GAAP,EAAY;AACZV,QAAAA,SAAS,CAACU,GAAD,CAAT;;AACA,cAAMA,GAAN;AACD;AACF,KArBuB;;AAsBxBhB,IAAAA,MAAM,CAACiB,MAAD,EAAS;AACbX,MAAAA,SAAS,CAACW,MAAD,CAAT;;AACA,aAAOb,QAAQ,CAACc,MAAT,EAAP;AACD;;AAzBuB,GAAnB,EA0BJ;AACDC,IAAAA,aAAa,EAAE;AADd,GA1BI,CAAP;AA6BD,CAzCM","sourcesContent":["\nexport const streamChunk = function* (chunk, chunkSize) {\n  let len = chunk.byteLength;\n\n  if (!chunkSize || len < chunkSize) {\n    yield chunk;\n    return;\n  }\n\n  let pos = 0;\n  let end;\n\n  while (pos < len) {\n    end = pos + chunkSize;\n    yield chunk.slice(pos, end);\n    pos = end;\n  }\n}\n\nexport const readBytes = async function* (iterable, chunkSize) {\n  for await (const chunk of readStream(iterable)) {\n    yield* streamChunk(chunk, chunkSize);\n  }\n}\n\nconst readStream = async function* (stream) {\n  if (stream[Symbol.asyncIterator]) {\n    yield* stream;\n    return;\n  }\n\n  const reader = stream.getReader();\n  try {\n    for (;;) {\n      const {done, value} = await reader.read();\n      if (done) {\n        break;\n      }\n      yield value;\n    }\n  } finally {\n    await reader.cancel();\n  }\n}\n\nexport const trackStream = (stream, chunkSize, onProgress, onFinish) => {\n  const iterator = readBytes(stream, chunkSize);\n\n  let bytes = 0;\n  let done;\n  let _onFinish = (e) => {\n    if (!done) {\n      done = true;\n      onFinish && onFinish(e);\n    }\n  }\n\n  return new ReadableStream({\n    async pull(controller) {\n      try {\n        const {done, value} = await iterator.next();\n\n        if (done) {\n         _onFinish();\n          controller.close();\n          return;\n        }\n\n        let len = value.byteLength;\n        if (onProgress) {\n          let loadedBytes = bytes += len;\n          onProgress(loadedBytes);\n        }\n        controller.enqueue(new Uint8Array(value));\n      } catch (err) {\n        _onFinish(err);\n        throw err;\n      }\n    },\n    cancel(reason) {\n      _onFinish(reason);\n      return iterator.return();\n    }\n  }, {\n    highWaterMark: 2\n  })\n}\n"]},"metadata":{},"sourceType":"module"}